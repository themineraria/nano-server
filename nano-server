#!/usr/bin/env node
/*
* nano-server.js: a lightweight node.js HTTP server for web development.
* Copyright (c) 2014 Tarek Sherif
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

"use strict";

var http = require("http");
var fs = require("fs");
var path = require("path");
var version = "0.5.4";
var mime_types = getMimeTypes();
var port = process.env.PORT || 5000;
var root = process.argv[3] || ".";

http.createServer(function (req, res) {
  var method = req.method;
  var url = req.url; 
  var request_path = decodeURI(url.replace(/^\/+/, "").replace(/\?.*$/, ""));
  var file_path = path.resolve(root, request_path);
  var mime_type = mime_types[path.extname(file_path)] || "application/octet-stream";
  if(request_path === "research")
  {
	  var urlParams = new URLSearchParams(url.replace(/^.*\?/, ""));
	  var obj = JSON.parse('{"' + decodeURI(urlParams).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g,'":"') + '"}');
	  let bdd_json = JSON.parse(fs.readFileSync('bdd.json'));
	  var result = new Array();
	  bdd_json.forEach(object => {
		 Object.keys(object).forEach(val => {
			 if(object[val] === obj[val])
				 result.push(object);
		 });
	  });
	  sendFile(res, "text/html", JSON.stringify(result));
  }
  else
  {
	  fs.stat(file_path, function(err, stat) {
		if (stat && stat.isDirectory()) {
		  fs.readFile(file_path + "/index.html", function(err, content) {
			if (err) {
			  request_path = (request_path + "/").replace(/\/+$/, "/");
			  listDirectory(res, file_path, request_path);
			  logResponse(method, url, 200, "Listing directory " + (request_path === "/" ? "." : request_path), "text/html");
			} else {
			  sendFile(res, "text/html", content);
			  logResponse(method, url, 200, "Sending file " + path.join(request_path, "index.html"), "text/html");
			}
		  });
		} else {
		  fs.readFile(file_path, function(err, content) {
			if (err) {
			  fs.readFile(file_path + ".gz", function(err, content) {
				if (err) {
				  res.writeHead(404);
				  res.end("File " + request_path + " not found.");
				  logResponse(method, url, 404, "File " + request_path + " not found");
				} else {
				  res.setHeader("Content-Encoding", "gzip");
				  sendFile(res, mime_type, content);
				  logResponse(method, url, 200, "Sending file " + request_path + ".gz", mime_type + " - gzip encoded");
				}
			  });
			} else {
			  sendFile(res, mime_type, content);
			  logResponse(method, url, 200, "Sending file " + request_path, mime_type);
			}
		  });
		}

	  });
  }
 

}).listen(port, function() {
  console.log("nano-server v" + version + " running in '" + root + "' started on port " + port + ".\n");
});

function sendFile(res, mime_type, content) {
  res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  res.setHeader("Pragma", "no-cache");
  res.setHeader("Expires", "0");

  res.setHeader("Content-Type", mime_type);

  res.end(content);
}

function listDirectory(res, dir, request_path) {
  res.setHeader("Content-Type", "text/html");
  res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  res.setHeader("Pragma", "no-cache");
  res.setHeader("Expires", "0");

  fs.readdir(dir, function(err, file_names) {
    var num_remaining = file_names.length;
    var files = [];
    var dirs = [];

    file_names.forEach(function(name) {
      fs.stat(path.join(dir, name), function(err, stat) {
        if (stat) {
          if (stat.isDirectory()) {
            dirs.push(name + "/");
          } else {
            files.push(name);
          }
        }

        if (!--num_remaining) {
          sendDirListing(res, files, dirs, request_path);
        }
      });
    });
  });
}

function sendDirListing(res, files, dirs, request_path) {
  request_path = ("/" + request_path).replace(/\/+/g, "/");

  var content = '<!DOCTYPE html><html><head><meta charset="utf-8"></head><body style="margin-left: 25px">';
  content += '<h2>Listing files for ' + request_path + '</h2>';
  content += '<ul>';

  content += dirs.map(function(dir) { 
    return '<li><a href="' + request_path + dir + '">' + dir + '</a></li>';
  }).join('');
  content += files.map(function(file) { 
    return '<li><a href="' + request_path + file + '">' + file + '</a></li>';
  }).join('');
  content += '</ul>';
  content += '</body></html>';
  res.end(content);
}

function logResponse(method, url, code, message, mime_type) {
  console.log(method, url);

  if (mime_type) {
    message += " (" + mime_type + ")";
  }

  console.log(code + ":", message + "\n");
}

function getMimeTypes() {
  return {
    ".avi":  "video/avi",
    ".bmp":  "image/bmp",
    ".css":  "text/css",
    ".gif":  "image/gif",
    ".svg": "image/svg+xml",
    ".htm": "text/html",
    ".html": "text/html",
    ".ico":  "image/x-icon",
    ".jpeg": "image/jpeg",
    ".jpg":  "image/jpeg",
    ".js": "text/javascript",
    ".json": "application/json",
    ".mov":  "video/quicktime",
    ".mp3":  "audio/mpeg3",
    ".mpa":  "audio/mpeg",
    ".mpeg": "video/mpeg",
    ".mpg":  "video/mpeg",
    ".oga": "audio/ogg", 
    ".ogg": "application/ogg", 
    ".ogv": "video/ogg", 
    ".pdf":  "application/pdf",
    ".png":  "image/png",
    ".tif":  "image/tiff",
    ".tiff": "image/tiff",
    ".txt":  "text/plain",
    ".wav":  "audio/wav",
    ".xml":  "text/xml",
  };
}

